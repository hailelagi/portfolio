{"version":3,"sources":["components/introduction/Navbar.jsx","components/introduction/Profile.jsx","components/introduction/Introduction.jsx","components/interests/Interest.jsx","components/interests/Interests.jsx","App.js","serviceWorker.js","index.js","img/profile.jpg"],"names":["Navbar","className","href","Profile","id","src","profile","width","height","alt","Introduction","Fragment","Component","Interest","props","icon","size","title","Interests","faDesktop","faHourglassEnd","faFileSignature","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2RAEe,SAASA,IACpB,OACI,6BACI,wBAAIC,UAAW,WACX,4BAAI,uBAAGC,KAAK,oBAAR,aACJ,4BAAI,uBAAGA,KAAK,oBAAR,WACJ,4BAAI,uBAAGA,KAAK,oBAAR,gB,oBCmBLC,MAxBf,WACE,OACE,4BAAQF,UAAW,WACjB,yBACEG,GAAG,cACHC,IAAKC,IACLC,MAAO,IACPC,OAAQ,IACRC,IAAK,YAEP,4BACG,IADH,WAEU,0BAAML,GAAG,QAAT,cAFV,sHAMA,yBAAKH,UAAW,kBACd,sDACA,gDCJOS,E,uKAXX,OACE,kBAAC,IAAMC,SAAP,KACE,6BAASV,UAAW,gBAClB,kBAACD,EAAD,MACA,kBAAC,EAAD,Y,GANiBY,a,sBCSZC,MATf,SAAkBC,GAChB,OACE,yBAAKb,UAAU,YACb,kBAAC,IAAD,CAAiBc,KAAMD,EAAMC,KAAMC,KAAK,OACxC,2BAAIF,EAAMG,S,OCaDC,MAbf,WACE,OACE,6BAASjB,UAAU,aACjB,yCACA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAUgB,MAAM,kBAAkBF,KAAMI,MACxC,kBAAC,EAAD,CAAUF,MAAM,uBAAuBF,KAAMK,MAC7C,kBAAC,EAAD,CAAUH,MAAM,qBAAqBF,KAAMM,SCApCC,MATf,WACE,OACE,kBAAC,IAAMX,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.cb8e0b9f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <nav>\r\n            <ul className={\"top-nav\"}>\r\n                <li><a href=\"Introduction.jsx\">about me</a></li>\r\n                <li><a href=\"Introduction.jsx\">skills</a></li>\r\n                <li><a href=\"Introduction.jsx\">portfolio</a></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport profile from \"../../img/profile.jpg\";\r\n\r\nfunction Profile() {\r\n  return (\r\n    <header className={\"profile\"}>\r\n      <img\r\n        id=\"profile-pic\"\r\n        src={profile}\r\n        width={150}\r\n        height={150}\r\n        alt={\"profile\"}\r\n      />\r\n      <h1>\r\n        {\" \"}\r\n        Hi, I'm <span id=\"name\">Haile Lagi</span> - chemical engineering\r\n        student, programmer and something clever or something. Cool tag bro.\r\n          Check me out. Hoorah.\r\n      </h1>\r\n      <div className={\"call-to-action\"}>\r\n        <button>download my resume</button>\r\n        <button>portfolio</button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Profile from \"./Profile\";\r\n\r\nclass Introduction extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <section className={\"introduction\"}>\r\n          <Navbar />\r\n          <Profile />\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Introduction;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nfunction Interest(props) {\r\n  return (\r\n    <div className=\"interest\">\r\n      <FontAwesomeIcon icon={props.icon} size=\"2x\" />\r\n      <p>{props.title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Interest;\r\n","import React from \"react\";\r\nimport Interest from \"./Interest\";\r\nimport {\r\n  faHourglassEnd,\r\n  faDesktop,\r\n  faFileSignature,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Interests() {\r\n  return (\r\n    <section className=\"interests\">\r\n      <h2>Interests</h2>\r\n      <div className=\"interest-align\">\r\n        <Interest title=\"Web development\" icon={faDesktop} />\r\n        <Interest title=\"Scientific computing\" icon={faHourglassEnd} />\r\n        <Interest title=\"Mobile development\" icon={faFileSignature} />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Interests;\r\n","import React from \"react\";\nimport Introduction from \"./components/introduction/Introduction\";\nimport \"./styles/App.css\";\nimport \"./styles/interesting.css\";\nimport Interests from \"./components/interests/Interests\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Introduction />\n      <Interests />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.d00071f2.jpg\";"],"sourceRoot":""}